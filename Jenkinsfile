pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-creds'  // Jenkins credentials ID
        REGISTRY = 'alekseynyagan607'
        VM_HOST = '192.168.1.45'
        VM_USER = 'aleksey'
        VM_REPO_PATH = '/home/aleksey/booking-hotels'
        SSH_CRED_ID = '0dca05a2-725b-48f4-bb0b-374158b89b15'
    }

    stages {
        stage('Detect Changed Services') {
            steps {
                script {
                    echo "üì° –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ origin/master"

                    // –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ç–∫—É
                    sh 'git fetch origin master'

                    // —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    def diff = sh(
                        script: "git diff --name-only origin/master..HEAD",
                        returnStdout: true
                    ).trim()

                    if (diff) {
                        echo "–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n${diff}"

                        // –≤—ã–¥–µ–ª–∏–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (–ø–∞–ø–∫–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ)
                        def services = []
                        diff.split("\n").each { file ->
                            def topDir = file.tokenize('/')[0]
                            if (file.contains("/") && !services.contains(topDir)) {
                                services << topDir
                            }
                        }

                        if (services) {
                            echo "üöÄ –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${services}"
                            env.CHANGED_SERVICES = services.join(" ")
                        } else {
                            echo "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö. –°–±–æ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
                            currentBuild.result = 'SUCCESS'
                            error("No service changes")
                        }
                    } else {
                        echo "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π. –°–±–æ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
                        currentBuild.result = 'SUCCESS'
                        error("No changes")
                    }
                }
            }
        }

        stage('Build & Push Docker Images') {
            when { expression { return env.skipRemainingStages != "true" } }
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: DOCKERHUB_CREDENTIALS_ID,
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        env.CHANGED_SERVICES.split(',').each { svc ->
                            def image = "${REGISTRY}/${svc}:latest"
                            echo "üê≥ –°–±–æ—Ä–∫–∞ –∏ –ø—É—à –æ–±—Ä–∞–∑–∞: ${image}"
                            sh """
                                docker build -t ${image} -f ${svc}/Dockerfile .
                                docker push ${image}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Test VM') {
            when { expression { return env.skipRemainingStages != "true" } }
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: DOCKERHUB_CREDENTIALS_ID,
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sshagent([SSH_CRED_ID]) {
                            env.CHANGED_SERVICES.split(',').each { svc ->
                                echo "üöÄ –î–µ–ø–ª–æ–π —Å–µ—Ä–≤–∏—Å–∞: ${svc} –Ω–∞ VM"
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_HOST} \\
                                    "docker login -u $DOCKER_USER -p $DOCKER_PASS && \\
                                     docker compose -f ${VM_REPO_PATH}/docker/compose.dev.yaml pull ${svc} && \\
                                     docker compose -f ${VM_REPO_PATH}/docker/compose.dev.yaml up -d ${svc}"
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Update VM Repo') {
            when { expression { return env.skipRemainingStages != "true" } }
            steps {
                script {
                    echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ VM"
                    sshagent([SSH_CRED_ID]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_HOST} \\
                            "cd ${VM_REPO_PATH} && git fetch origin master && git reset --hard HEAD && git pull origin master"
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º workspace —Å GitHub"
                sh """
                    git fetch origin master
                    git reset --hard origin/master
                """
            }
        }
    }
}
spring:
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/booking_hotels
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_batch_fetch_size: 50
    show-sql: true
    open-in-view: false
  liquibase:
    change-log: classpath:/db/changelog/db.changelog-master.xml
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/booking_hotels
    user: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}
    analytics-enabled: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://${KEYCLOAK_HOST:localhost}:${KEYCLOAK_PORT:8080}/realms/booking-hotels-realm
          jwk-set-uri: http://${KEYCLOAK_HOST:localhost}:${KEYCLOAK_PORT:8080}/realms/booking-hotels-realm/protocol/openid-connect/certs
  cloud:
    stream:
      output-bindings: producer
      bindings:
        producer-out-0:
          destination: statistic
      kafka:
        binder:
          enableObservation: true
          transactionIdPrefix: statistic-
          brokers: ${KAFKA_BROKERS:localhost}:${KAFKA_PORT:9092}
eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${EUREKA_HOST:localhost}:${EUREKA_PORT:8070}/eureka/
logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
server:
  port: ${SERVER_PORT:8180}
management:
  observations:
    http:
      server:
        requests:
          write-trace-header: true
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://${ZIPKIN_HOST:localhost}:${ZIPKIN_PORT:9411}/api/v2/spans
  endpoints:
    web:
      exposure:
        include: "*"
    enabled-by-default: true
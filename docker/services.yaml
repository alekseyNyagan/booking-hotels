services:
  config-server:
    image: alekseynyagan607/config-server:latest
    container_name: config-server
    ports:
      - "8071:8071"
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - ENCRYPT_KEY=IMSYMMETRIC
      - SERVER_PORT=8071
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8071/actuator/health || exit 1
      interval: 30s
      timeout: 5s
      start_period: 30s
      retries: 5

  postgres:
    image: postgres:16.3
    container_name: postgres
    environment:
      POSTGRES_DB: booking_hotels
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  keycloak:
    image: alekseynyagan607/keycloak:latest
    container_name: keycloak
    command:
      - start
      - --optimized
      - --import-realm
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloakdb
      KC_DB_USERNAME: keycloakuser
      KC_DB_PASSWORD: keycloakpass
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: adminpass
      KC_HTTP_ENABLED: "true"
      KC_HTTP_PORT: 8080
      KC_MANAGEMENT_ENABLED: "true"
      KC_HTTP_MANAGEMENT_PORT: 9000
      KC_HOSTNAME_STRICT: "false"
    depends_on:
      - keycloak-postgres
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
      - "9000:9000"
    healthcheck:
      test: ["CMD-SHELL",
        "exec 3<>/dev/tcp/127.0.0.1/9000; \
     echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n' >&3; \
     cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 15s

  keycloak-postgres:
    image: postgres:16.3
    volumes:
      - postgres_data:/var/lib/postgresql/data
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloakdb
      POSTGRES_USER: keycloakuser
      POSTGRES_PASSWORD: keycloakpass

  zookeeper:
    image: wurstmeister/zookeeper:latest

  kafka:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "statistic:1:1"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper

  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db

  elasticsearch:
    image: elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
      - discovery.type=single-node
      - cluster.routing.allocation.disk.watermark.low=600mb
      - cluster.routing.allocation.disk.watermark.high=500mb
      - cluster.routing.allocation.disk.watermark.flood_stage=400mb
    volumes:
      - esdata1:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.15.0
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9300
    depends_on:
      - elasticsearch

  logstash:
    image: logstash:8.15.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    depends_on:
      - elasticsearch

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    depends_on:
      - elasticsearch

  prometheus:
    image: prom/prometheus:latest
    restart: "no"
    command:
      - "--web.enable-lifecycle"
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    restart: "no"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: true

volumes:
  postgres_data:
    driver: local
  mongodb_data:
  esdata1:
    driver: local
  prometheus_data: